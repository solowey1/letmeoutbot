const { CALLBACK_ACTIONS, MESSAGES, ADMIN_IDS } = require('../config/constants');
const KeyboardUtils = require('../utils/keyboards');
const PlanService = require('../services/PlanService');

class CallbackHandler {
    constructor(database, paymentService, subscriptionService) {
        this.db = database;
        this.paymentService = paymentService;
        this.subscriptionService = subscriptionService;
    }

    async handleCallback(ctx) {
        const callbackData = ctx.callbackQuery.data;
        const userId = ctx.from.id;

        try {
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∑–∞–ø—Ä–æ—Å —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
            await ctx.answerCbQuery();

            // –†–æ—É—Ç–∏–Ω–≥ callback'–æ–≤
            if (callbackData === CALLBACK_ACTIONS.BACK_TO_MENU) {
                await this.handleBackToMenu(ctx);
            } else if (callbackData === CALLBACK_ACTIONS.BUY_PLAN) {
                await this.handleShowPlans(ctx);
            } else if (callbackData.startsWith(`${CALLBACK_ACTIONS.BUY_PLAN}_`)) {
                const planId = callbackData.split('_').slice(2).join('_');
                await this.handleShowPlanDetails(ctx, planId);
            } else if (callbackData.startsWith(`${CALLBACK_ACTIONS.CONFIRM_PURCHASE}_`)) {
                const planId = callbackData.split('_').slice(2).join('_');
                await this.handleConfirmPurchase(ctx, planId);
            } else if (callbackData.startsWith('confirm_payment_')) {
                const planId = callbackData.split('_').slice(2).join('_');
                await this.handleCreateInvoice(ctx, planId);
            } else if (callbackData === CALLBACK_ACTIONS.MY_SUBSCRIPTIONS) {
                await this.handleMySubscriptions(ctx);
            } else if (callbackData.startsWith('sub_details_')) {
                const subscriptionId = parseInt(callbackData.split('_')[2]);
                await this.handleSubscriptionDetails(ctx, subscriptionId);
            } else if (callbackData.startsWith('sub_stats_')) {
                const subscriptionId = parseInt(callbackData.split('_')[2]);
                await this.handleSubscriptionStats(ctx, subscriptionId);
            } else if (callbackData === 'help') {
                await this.handleHelp(ctx);
            } else if (callbackData === 'download_apps') {
                await this.handleDownloadApps(ctx);
            } else if (callbackData === 'support') {
                await this.handleSupport(ctx);
            } else if (callbackData === CALLBACK_ACTIONS.ADMIN_PANEL) {
                await this.handleAdminPanel(ctx);
            } else if (callbackData === CALLBACK_ACTIONS.ADMIN_USERS) {
                await this.handleAdminUsers(ctx);
            } else if (callbackData === CALLBACK_ACTIONS.ADMIN_STATS) {
                await this.handleAdminStats(ctx);
            } else {
                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                await ctx.editMessageText('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', KeyboardUtils.createBackToMenuKeyboard());
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
            await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
        }
    }

    async handleBackToMenu(ctx) {
        const keyboard = KeyboardUtils.createMainMenu();
        await ctx.editMessageText(MESSAGES.WELCOME, { 
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleShowPlans(ctx) {
        const plans = PlanService.getAllPlans();
        const keyboard = KeyboardUtils.createPlansKeyboard();
        
        let message = 'üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:</b>\n\n';
        
        plans.forEach(plan => {
            const formatted = PlanService.formatPlanForDisplay(plan);
            message += `${formatted.displayName}\n`;
            message += `${formatted.fullDescription}\n\n`;
        });

        await ctx.editMessageText(message, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleShowPlanDetails(ctx, planId) {
        const plan = PlanService.getPlanById(planId);
        if (!plan) {
            await ctx.editMessageText('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', KeyboardUtils.createBackToMenuKeyboard());
            return;
        }

        const formatted = PlanService.formatPlanForDisplay(plan);
        const savings = PlanService.calculateSavings(plan);
        
        let message = `${formatted.displayName}\n\n`;
        message += `üì¶ <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>\n`;
        message += `‚Ä¢ –û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: ${formatted.displayDescription.split(' –Ω–∞ ')[0]}\n`;
        message += `‚Ä¢ –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è: ${formatted.displayDescription.split(' –Ω–∞ ')[1]}\n`;
        message += `‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n`;
        message += `‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n`;
        message += `‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n`;
        
        if (savings > 0) {
            message += `üí∞ <b>–≠–∫–æ–Ω–æ–º–∏—è: ${savings} ‚≠ê</b>\n\n`;
        }
        
        message += `üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å: ${formatted.displayPrice}</b>\n\n`;
        message += `${plan.description}`;

        const keyboard = KeyboardUtils.createPlanDetailsKeyboard(planId);
        
        await ctx.editMessageText(message, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleConfirmPurchase(ctx, planId) {
        const plan = PlanService.getPlanById(planId);
        if (!plan) {
            await ctx.editMessageText('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', KeyboardUtils.createBackToMenuKeyboard());
            return;
        }

        const formatted = PlanService.formatPlanForDisplay(plan);
        
        let message = `üõí <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n`;
        message += `üì¶ –¢–∞—Ä–∏—Ñ: ${formatted.displayName}\n`;
        message += `üíæ –û–±—ä–µ–º: ${formatted.displayDescription.split(' –Ω–∞ ')[0]}\n`;
        message += `‚è∞ –ü–µ—Ä–∏–æ–¥: ${formatted.displayDescription.split(' –Ω–∞ ')[1]}\n`;
        message += `üí∞ –ö –æ–ø–ª–∞—Ç–µ: ${formatted.displayPrice}\n\n`;
        message += `–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç–µ VPN –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n`;
        message += `‚≠ê –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Telegram Stars`;

        const keyboard = KeyboardUtils.createPaymentConfirmationKeyboard(planId);
        
        await ctx.editMessageText(message, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleCreateInvoice(ctx, planId) {
        try {
            const plan = PlanService.getPlanById(planId);
            if (!plan) {
                throw new Error('–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let user = await this.db.getUser(ctx.from.id);
            if (!user) {
                await this.db.createUser(ctx.from.id, ctx.from.username, ctx.from.first_name, ctx.from.last_name);
                user = await this.db.getUser(ctx.from.id);
            }

            // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
            const { paymentId, invoice } = await this.paymentService.createInvoice(user.id, plan);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await ctx.replyWithInvoice({
                title: invoice.title,
                description: invoice.description,
                payload: invoice.payload,
                provider_token: invoice.provider_token,
                currency: invoice.currency,
                prices: invoice.prices,
                photo_url: undefined,
                photo_size: undefined,
                photo_width: undefined,
                photo_height: undefined,
                need_name: false,
                need_phone_number: false,
                need_email: false,
                need_shipping_address: false,
                send_phone_number_to_provider: false,
                send_email_to_provider: false,
                is_flexible: false
            });

            await ctx.editMessageText('üí≥ –ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É.', 
                KeyboardUtils.createBackToMenuKeyboard());

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
                KeyboardUtils.createBackToMenuKeyboard());
        }
    }

    async handleMySubscriptions(ctx) {
        try {
            let user = await this.db.getUser(ctx.from.id);
            if (!user) {
                await ctx.editMessageText(MESSAGES.NO_ACTIVE_SUBS, {
                    ...KeyboardUtils.createMainMenu(),
                    parse_mode: 'HTML'
                });
                return;
            }

            const subscriptions = await this.subscriptionService.getUserActiveSubscriptions(user.id);
            
            if (subscriptions.length === 0) {
                await ctx.editMessageText(MESSAGES.NO_ACTIVE_SUBS, {
                    ...KeyboardUtils.createSubscriptionsKeyboard([]),
                    parse_mode: 'HTML'
                });
                return;
            }

            let message = 'üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n';
            
            for (let i = 0; i < subscriptions.length; i++) {
                const sub = subscriptions[i];
                const usage = await this.subscriptionService.getUsageStats(sub.id);
                
                message += `${i + 1}. ${sub.plan.displayName}\n`;
                message += `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${sub.status === 'active' ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n`;
                
                if (usage) {
                    message += `   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usage.formattedUsed} –∏–∑ ${usage.formattedLimit} (${usage.usagePercentage}%)\n`;
                    message += `   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${usage.daysRemaining}\n`;
                }
                
                message += `   ‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(sub.expires_at).toLocaleDateString('ru-RU')}\n\n`;
            }

            const keyboard = KeyboardUtils.createSubscriptionsKeyboard(subscriptions);
            
            await ctx.editMessageText(message, {
                ...keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫', 
                KeyboardUtils.createBackToMenuKeyboard());
        }
    }

    async handleSubscriptionDetails(ctx, subscriptionId) {
        try {
            const subscription = await this.subscriptionService.getSubscriptionDetails(subscriptionId, true);
            if (!subscription) {
                await ctx.editMessageText('‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 
                    KeyboardUtils.createBackToMenuKeyboard());
                return;
            }

            let message = `üîë <b>–î–µ—Ç–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n`;
            message += `üì¶ –¢–∞—Ä–∏—Ñ: ${subscription.plan.displayName}\n`;
            message += `üü¢ –°—Ç–∞—Ç—É—Å: ${subscription.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n`;
            
            if (subscription.usage) {
                const usage = subscription.usage;
                message += `üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n`;
                message += `‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usage.formattedUsed} (${usage.usagePercentage}%)\n`;
                message += `‚Ä¢ –õ–∏–º–∏—Ç: ${usage.formattedLimit}\n`;
                message += `‚Ä¢ –û—Å—Ç–∞–µ—Ç—Å—è: ${usage.formattedRemaining}\n`;
                message += `‚Ä¢ –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${usage.daysRemaining}\n\n`;
            }

            if (subscription.access_url) {
                message += `üîê <b>–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:</b>\n`;
                message += `<code>${subscription.access_url}</code>\n\n`;
                message += `üì± <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n`;
                message += `1. –°–∫–∞—á–∞–π—Ç–µ Outline Client\n`;
                message += `2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –≤—ã—à–µ\n`;
                message += `3. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`;
            }

            const keyboard = KeyboardUtils.createSubscriptionDetailsKeyboard(subscriptionId);
            
            await ctx.editMessageText(message, {
                ...keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏', 
                KeyboardUtils.createBackToMenuKeyboard());
        }
    }

    async handleSubscriptionStats(ctx, subscriptionId) {
        try {
            const usage = await this.subscriptionService.getUsageStats(subscriptionId);
            if (!usage) {
                await ctx.editMessageText('‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 
                    KeyboardUtils.createBackToMenuKeyboard());
                return;
            }

            let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</b>\n\n`;
            
            // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            const progressBar = this.createProgressBar(usage.usagePercentage);
            
            message += `üìà ${progressBar} ${usage.usagePercentage}%\n\n`;
            message += `üì• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${usage.formattedUsed}\n`;
            message += `üì¶ –õ–∏–º–∏—Ç: ${usage.formattedLimit}\n`;
            message += `üì§ –û—Å—Ç–∞–µ—Ç—Å—è: ${usage.formattedRemaining}\n\n`;
            message += `‚è∞ –î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${usage.daysRemaining}\n`;
            
            if (usage.isOverLimit) {
                message += `\nüö® <b>–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!</b> –î–æ—Å—Ç—É–ø –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`;
            } else if (usage.usagePercentage > 90) {
                message += `\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ç—Ä–∞—Ñ–∏–∫.`;
            }
            
            if (usage.isExpired) {
                message += `\nüïê <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b> –ü—Ä–æ–¥–ª–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.`;
            } else if (usage.daysRemaining <= 3) {
                message += `\n‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!</b> –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å.`;
            }

            const keyboard = KeyboardUtils.createSubscriptionDetailsKeyboard(subscriptionId);
            
            await ctx.editMessageText(message, {
                ...keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 
                KeyboardUtils.createBackToMenuKeyboard());
        }
    }

    async handleHelp(ctx) {
        const keyboard = KeyboardUtils.createHelpKeyboard();
        await ctx.editMessageText(MESSAGES.HELP, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleDownloadApps(ctx) {
        const keyboard = KeyboardUtils.createAppsDownloadKeyboard();
        const message = `üì± <b>–°–∫–∞—á–∞—Ç—å Outline Client:</b>\n\n` +
                       `–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\n\n` +
                       `üî∏ <b>Android</b> - Google Play Store\n` +
                       `üî∏ <b>iOS</b> - App Store\n` +
                       `üî∏ <b>Windows</b> - –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞\n` +
                       `üî∏ <b>macOS</b> - –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞\n\n` +
                       `–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.`;
        
        await ctx.editMessageText(message, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleSupport(ctx) {
        const message = `üÜò <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n` +
                       `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:\n\n` +
                       `1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞\n` +
                       `2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –æ–±–Ω–æ–≤–ª–µ–Ω–æ\n` +
                       `3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\n` +
                       `4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–µ\n\n` +
                       `üìß –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
        
        const keyboard = KeyboardUtils.createBackToMenuKeyboard();
        
        await ctx.editMessageText(message, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleAdminPanel(ctx) {
        if (!ADMIN_IDS.includes(ctx.from.id)) {
            await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
            return;
        }

        const keyboard = KeyboardUtils.createAdminKeyboard();
        const message = `‚öôÔ∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n` +
                       `–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`;
        
        await ctx.editMessageText(message, {
            ...keyboard,
            parse_mode: 'HTML'
        });
    }

    async handleAdminUsers(ctx) {
        if (!ADMIN_IDS.includes(ctx.from.id)) {
            await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
            return;
        }

        try {
            const users = await this.db.getAllUsers(10);
            
            let message = `üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n`;
            
            users.forEach((user, index) => {
                const registrationDate = new Date(user.created_at).toLocaleDateString('ru-RU');
                message += `${index + 1}. <b>${user.first_name}</b> (@${user.username || '–±–µ–∑ username'})\n`;
                message += `   ID: ${user.telegram_id}\n`;
                message += `   –ü–æ–¥–ø–∏—Å–æ–∫: ${user.subscription_count}\n`;
                message += `   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${registrationDate}\n\n`;
            });

            const keyboard = KeyboardUtils.createAdminKeyboard();
            
            await ctx.editMessageText(message, {
                ...keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 
                KeyboardUtils.createAdminKeyboard());
        }
    }

    async handleAdminStats(ctx) {
        if (!ADMIN_IDS.includes(ctx.from.id)) {
            await ctx.answerCbQuery('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
            return;
        }

        try {
            const stats = await this.db.getStats();
            
            let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n`;
            message += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
            message += `üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${stats.activeSubscriptions}\n`;
            message += `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.totalRevenue} ‚≠ê\n`;
            message += `üí≥ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: ${stats.totalPayments}\n`;

            const keyboard = KeyboardUtils.createAdminKeyboard();
            
            await ctx.editMessageText(message, {
                ...keyboard,
                parse_mode: 'HTML'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 
                KeyboardUtils.createAdminKeyboard());
        }
    }

    createProgressBar(percentage, length = 10) {
        const filled = Math.round((percentage / 100) * length);
        const empty = length - filled;
        return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
    }
}

module.exports = CallbackHandler;