require('dotenv').config();
const { Telegraf } = require('telegraf');
const cron = require('cron');

// –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
const Database = require('../models/Database');
const OutlineService = require('../services/OutlineService');
const PaymentService = require('../services/PaymentService');
const SubscriptionService = require('../services/SubscriptionService');
const NotificationService = require('../services/NotificationService');

// –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const CallbackHandler = require('../handlers/callbackHandler');

// –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
const KeyboardUtils = require('../utils/keyboards');

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const { MESSAGES, BOT_COMMANDS, ADMIN_IDS } = require('../config/constants');
const config = require('../config/database');

class VPNBot {
    constructor() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegraf –±–æ—Ç–∞
        this.bot = new Telegraf(config.telegram.token, config.telegram.options);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Ä–≤–∏—Å—ã
        this.db = new Database(config.database.path);
        this.outlineService = new OutlineService(config.outline.apiUrl);
        this.paymentService = new PaymentService(this.db);
        this.subscriptionService = new SubscriptionService(this.db, this.outlineService);
        this.notificationService = new NotificationService(this.bot);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.callbackHandler = new CallbackHandler(this.db, this.paymentService, this.subscriptionService);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏ cron –∑–∞–¥–∞—á–∏
        this.setupHandlers();
        this.setupCronJobs();
        
        // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ SubscriptionService
        this.subscriptionService.sendNotificationToUser = this.notificationService.sendNotificationToUser.bind(this.notificationService);
    }

    setupHandlers() {
        // –ö–æ–º–∞–Ω–¥–∞ /start
        this.bot.start(async (ctx) => {
            try {
                await this.handleStart(ctx);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /help
        this.bot.help(async (ctx) => {
            try {
                const keyboard = KeyboardUtils.createHelpKeyboard();
                await ctx.reply(MESSAGES.HELP, {
                    ...keyboard,
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /help:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –ö–æ–º–∞–Ω–¥–∞ /admin (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        this.bot.command('admin', async (ctx) => {
            try {
                if (!ADMIN_IDS.includes(ctx.from.id)) {
                    await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.');
                    return;
                }

                const keyboard = KeyboardUtils.createAdminKeyboard();
                const message = `‚öôÔ∏è <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:`;
                
                await ctx.reply(message, {
                    ...keyboard,
                    parse_mode: 'HTML'
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bot.on('callback_query', async (ctx) => {
            await this.callbackHandler.handleCallback(ctx);
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        this.bot.on('successful_payment', async (ctx) => {
            try {
                await this.handleSuccessfulPayment(ctx);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ-—á–µ–∫–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
        this.bot.on('pre_checkout_query', async (ctx) => {
            try {
                await ctx.answerPreCheckoutQuery(true);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ-—á–µ–∫–∞—É—Ç–∞:', error);
                await ctx.answerPreCheckoutQuery(false, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.bot.on('message', async (ctx) => {
            try {
                if (ctx.message.text) {
                    await this.showMainMenu(ctx);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        this.bot.catch((err, ctx) => {
            console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
        });
    }

    async handleStart(ctx) {
        const telegramId = ctx.from.id;
        const username = ctx.from.username;
        const firstName = ctx.from.first_name;
        const lastName = ctx.from.last_name;

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let user = await this.db.getUser(telegramId);
        
        if (!user) {
            await this.db.createUser(telegramId, username, firstName, lastName);
            user = await this.db.getUser(telegramId);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            const updates = {};
            if (user.username !== username) updates.username = username;
            if (user.first_name !== firstName) updates.first_name = firstName;
            if (user.last_name !== lastName) updates.last_name = lastName;
            
            if (Object.keys(updates).length > 0) {
                await this.db.updateUser(telegramId, updates);
            }
        }

        await this.showMainMenu(ctx);
    }

    async showMainMenu(ctx) {
        const keyboard = KeyboardUtils.createMainMenu();
        await ctx.reply(MESSAGES.WELCOME, {
            ...keyboard,
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }

    async handleSuccessfulPayment(ctx) {
        console.log('üì¢ –ü–æ–ª—É—á–µ–Ω successful_payment –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', ctx.from.id);
        
        const payment = ctx.message.successful_payment;
        const payloadData = payment.invoice_payload;

        console.log('üí∞ –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', {
            payload: payloadData,
            telegramChargeId: payment.telegram_payment_charge_id,
            providerChargeId: payment.provider_payment_charge_id,
            totalAmount: payment.total_amount
        });

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload
        const paymentId = this.paymentService.extractPaymentIdFromPayload(payloadData);
        
        if (!paymentId) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload:', payloadData);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
            return;
        }

        console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω ID –ø–ª–∞—Ç–µ–∂–∞:', paymentId);

        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...');
            
            const completedPayment = await this.paymentService.processSuccessfulPayment(
                paymentId,
                payment.telegram_payment_charge_id,
                payment.provider_payment_charge_id
            );

            if (!completedPayment) {
                throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª–µ–Ω:', completedPayment);
            console.log('üìù –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É...');

            const subscriptionId = await this.subscriptionService.createSubscription(
                completedPayment.user_id,
                completedPayment.plan_id,
                paymentId
            );

            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID:', subscriptionId);
            console.log('üîë –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–æ–∑–¥–∞–µ–º VPN –∫–ª—é—á...');

            const activationResult = await this.subscriptionService.activateSubscription(
                subscriptionId,
                ctx.from.first_name
            );

            console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:', activationResult);
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...');

            await this.sendAccessKeyMessage(ctx, completedPayment, activationResult);

            console.log('‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
            console.error('‚ùå Stack trace:', error.stack);
            
            await this.paymentService.processFailedPayment(paymentId, error.message);
            
            await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ${error.message}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`);
        }
    }

    async sendAccessKeyMessage(ctx, payment, activationResult) {
        const { subscription, accessUrl } = activationResult;
        
        let message = `‚úÖ <b>–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n`;
        message += `üéâ –í–∞—à–∞ VPN –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n`;
        message += `üîë <b>–ö–ª—é—á –¥–æ—Å—Ç—É–ø–∞:</b>\n`;
        message += `<code>${accessUrl}</code>\n\n`;
        message += `üì± <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>\n`;
        message += `1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline Client\n`;
        message += `2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –≤—ã—à–µ\n`;
        message += `3. –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n`;
        message += `4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º!\n\n`;
        message += `üìä –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"`;

        const keyboard = KeyboardUtils.createAppsDownloadKeyboard();

        await ctx.reply(message, {
            ...keyboard,
            parse_mode: 'HTML',
            disable_web_page_preview: true
        });
    }

    setupCronJobs() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        const limitsCheckJob = new cron.CronJob('*/30 * * * *', async () => {
            try {
                console.log('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫...');
                await this.subscriptionService.checkAllActiveSubscriptions();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ cron –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
            }
        });

        limitsCheckJob.start();
        console.log('‚úÖ Cron –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    async start() {
        try {
            console.log('ü§ñ VPN Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
            
            await this.bot.launch();
            console.log('‚úÖ VPN Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await this.bot.telegram.setMyCommands([
                { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
                { command: 'help', description: '–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' }
            ]);

            // Graceful stop
            process.once('SIGINT', () => {
                console.log('–ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
                this.stop();
            });

            process.once('SIGTERM', () => {
                console.log('–ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...');
                this.stop();
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
            this.db.close();
            process.exit(1);
        }
    }

    stop() {
        this.bot.stop('SIGINT');
        this.db.close();
        process.exit(0);
    }

    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–∏—Å–∞–º (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–≤–Ω–µ)
    getBot() {
        return this.bot;
    }

    getDatabase() {
        return this.db;
    }

    getNotificationService() {
        return this.notificationService;
    }
}

module.exports = VPNBot;