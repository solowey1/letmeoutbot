const { PAYMENT_STATUS } = require('../config/constants');

class PaymentService {
    constructor(database) {
        this.db = database;
    }

    async createInvoice(userId, plan) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            const paymentId = await this.db.createPayment(userId, plan.id, plan.price);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º invoice –¥–ª—è Telegram Stars
            const invoice = {
                title: plan.name,
                description: plan.description,
                payload: `payment_${paymentId}`,
                provider_token: '', // –î–ª—è Telegram Stars –ø—É—Å—Ç–æ–π
                currency: 'XTR', // Telegram Stars
                prices: [
                    {
                        label: plan.name,
                        amount: plan.price // –í –∑–≤—ë–∑–¥–∞—Ö
                    }
                ]
            };

            return {
                paymentId,
                invoice
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞:', error);
            throw error;
        }
    }

    async processSuccessfulPayment(paymentId, telegramChargeId, providerChargeId) {
        try {
            const updates = {
                status: PAYMENT_STATUS.COMPLETED,
                telegram_payment_charge_id: telegramChargeId,
                provider_payment_charge_id: providerChargeId
            };

            await this.db.updatePayment(paymentId, updates);
            
            const payment = await this.db.getPaymentById(paymentId);
            return payment;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }

    async processFailedPayment(paymentId, reason = 'Unknown error') {
        try {
            const updates = {
                status: PAYMENT_STATUS.FAILED
            };

            await this.db.updatePayment(paymentId, updates);
            console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã–π: ${reason}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }

    async refundPayment(paymentId, reason = 'User refund request') {
        try {
            const updates = {
                status: PAYMENT_STATUS.REFUNDED
            };

            await this.db.updatePayment(paymentId, updates);
            console.log(`–ü–ª–∞—Ç–µ–∂ ${paymentId} –≤–æ–∑–≤—Ä–∞—â–µ–Ω: ${reason}`);
            
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }

    extractPaymentIdFromPayload(payload) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ payload
        const match = payload.match(/payment_(\d+)/);
        return match ? parseInt(match[1]) : null;
    }

    async getPaymentById(paymentId) {
        try {
            return await this.db.getPaymentById(paymentId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }

    formatStarsAmount(amount) {
        return `${amount} ‚≠ê`;
    }

    generateReceiptMessage(payment, plan, subscriptionInfo) {
        const message = `
üßæ <b>–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ</b>

üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>
‚Ä¢ –¢–∞—Ä–∏—Ñ: ${plan.name}
‚Ä¢ –û–±—ä–µ–º: ${this.formatDataLimit(plan.dataLimit)}
‚Ä¢ –ü–µ—Ä–∏–æ–¥: ${this.formatDuration(plan.duration)}

üí∞ <b>–ü–ª–∞—Ç–µ–∂:</b>
‚Ä¢ –°—É–º–º–∞: ${this.formatStarsAmount(payment.amount)}
‚Ä¢ –°—Ç–∞—Ç—É—Å: –û–ø–ª–∞—á–µ–Ω–æ ‚úÖ
‚Ä¢ –î–∞—Ç–∞: ${new Date(payment.created_at).toLocaleString('ru-RU')}

üîë <b>VPN –¥–æ—Å—Ç—É–ø:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–µ–Ω
‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(subscriptionInfo.expires_at).toLocaleString('ru-RU')}

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ
        `.trim();

        return message;
    }

    formatDataLimit(bytes) {
        const gb = bytes / (1024 * 1024 * 1024);
        if (gb >= 1024) {
            return `${(gb / 1024).toFixed(0)} –¢–ë`;
        }
        return `${gb.toFixed(0)} –ì–ë`;
    }

    formatDuration(days) {
        if (days >= 365) {
            return `${Math.floor(days / 365)} –≥–æ–¥`;
        } else if (days >= 30) {
            const months = Math.floor(days / 30);
            return `${months} ${months === 6 ? '–º–µ—Å—è—Ü–µ–≤' : '–º–µ—Å—è—Ü'}`;
        }
        return `${days} –¥–Ω–µ–π`;
    }

    async getPaymentStats(startDate, endDate) {
        try {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            return {
                totalPayments: 0,
                totalRevenue: 0,
                successfulPayments: 0,
                failedPayments: 0
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
            throw error;
        }
    }
}

module.exports = PaymentService;