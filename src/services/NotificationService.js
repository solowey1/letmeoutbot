const { Markup } = require('telegraf');
const { NOTIFICATION_TYPES, CALLBACK_ACTIONS } = require('../config/constants');

class NotificationService {
    constructor(bot) {
        this.bot = bot;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    async sendNotificationToUser(telegramId, notification) {
        try {
            let message = '';
            let keyboard = null;

            switch (notification.type) {
                case NOTIFICATION_TYPES.TRAFFIC_WARNING_5:
                    message = `‚ö†Ô∏è <b>–¢—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è!</b>\n\n`;
                    message += `–û—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ ${notification.data.remainingPercentage}% –æ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞.\n`;
                    message += `–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${notification.data.daysRemaining}\n\n`;
                    message += `üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞—Ç—å—Å—è –±–µ–∑ VPN!`;
                    break;

                case NOTIFICATION_TYPES.TRAFFIC_WARNING_1:
                    message = `üö® <b>–ö–†–ò–¢–ò–ß–ù–û: –¢—Ä–∞—Ñ–∏–∫ –Ω–∞ –∏—Å—Ö–æ–¥–µ!</b>\n\n`;
                    message += `–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ ${notification.data.remainingPercentage}% –æ—Ç —Ç—Ä–∞—Ñ–∏–∫–∞!\n`;
                    message += `–î–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${notification.data.daysRemaining}\n\n`;
                    message += `‚ö° –°—Ä–æ—á–Ω–æ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –∏–Ω–∞—á–µ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`;
                    break;

                case NOTIFICATION_TYPES.TRAFFIC_EXHAUSTED:
                    message = `‚ùå <b>–¢—Ä–∞—Ñ–∏–∫ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>\n\n`;
                    message += `–í–µ—Å—å —Ç—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω (${notification.data.usagePercentage}%).\n`;
                    message += `–î–æ—Å—Ç—É–ø –∫ VPN –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n`;
                    message += `üîÑ –ö—É–ø–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.`;
                    break;

                case NOTIFICATION_TYPES.TIME_WARNING_3:
                    message = `‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!</b>\n\n`;
                    message += `–û—Å—Ç–∞–ª–æ—Å—å ${notification.data.daysRemaining} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è.\n`;
                    message += `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: ${notification.data.usagePercentage}%\n\n`;
                    message += `üí° –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!`;
                    break;

                case NOTIFICATION_TYPES.TIME_WARNING_1:
                    message = `üî• <b>–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞!</b>\n\n`;
                    message += `–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ ${notification.data.daysRemaining} –¥–µ–Ω—å!\n`;
                    message += `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞: ${notification.data.usagePercentage}%\n\n`;
                    message += `‚ö° –ü—Ä–æ–¥–ª–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN!`;
                    break;

                case NOTIFICATION_TYPES.TIME_EXPIRED:
                    message = `‚õî <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>\n\n`;
                    message += `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è VPN –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\n`;
                    message += `–î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n`;
                    message += `üõí –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.`;
                    break;

                default:
                    message = `üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∞—à–µ–π VPN –ø–æ–¥–ø–∏—Å–∫–∏.`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            keyboard = Markup.inlineKeyboard([
                [Markup.button.callback('üíé –ö—É–ø–∏—Ç—å VPN', CALLBACK_ACTIONS.BUY_PLAN)],
                [Markup.button.callback('üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏', CALLBACK_ACTIONS.MY_SUBSCRIPTIONS)]
            ]);

            await this.bot.telegram.sendMessage(telegramId, message, {
                parse_mode: 'HTML',
                disable_web_page_preview: true,
                ...keyboard
            });

            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}: ${notification.type}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, error.message);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async sendAdminNotification(message, adminIds) {
        try {
            for (const adminId of adminIds) {
                await this.bot.telegram.sendMessage(adminId, `üîß <b>Admin:</b> ${message}`, {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                });
            }
            console.log(`‚úÖ –ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: ${adminIds.length} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π`);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    async broadcastMessage(userIds, message, keyboard = null) {
        let successCount = 0;
        let failureCount = 0;

        for (const userId of userIds) {
            try {
                const options = {
                    parse_mode: 'HTML',
                    disable_web_page_preview: true
                };

                if (keyboard) {
                    Object.assign(options, keyboard);
                }

                await this.bot.telegram.sendMessage(userId, message, options);
                successCount++;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 100));
            } catch (error) {
                failureCount++;
                console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
            }
        }

        console.log(`üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${successCount} —É—Å–ø–µ—à–Ω–æ, ${failureCount} –æ—à–∏–±–æ–∫`);
        return { success: successCount, failed: failureCount };
    }
}

module.exports = NotificationService;