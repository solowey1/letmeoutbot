#!/bin/bash

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç VPN Bot
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: curl -fsSL https://raw.githubusercontent.com/your-repo/vpnbot/main/install.sh | bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_NAME="vpnbot"
PROJECT_DIR="/opt/$PROJECT_NAME"
REPO_URL="https://github.com/your-username/vpnbot.git"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo bash install.sh"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –û–°
check_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        log_info "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: $OS"
    else
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°"
        exit 1
    fi
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
update_system() {
    log_info "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã..."
    apt update && apt upgrade -y
    apt install -y curl wget git nano htop
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
install_docker() {
    if command -v docker &> /dev/null; then
        log_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã docker –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    groupadd docker || true
    usermod -aG docker root
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    systemctl enable docker
    systemctl start docker
    
    log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    rm -f get-docker.sh
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
install_docker_compose() {
    if command -v docker-compose &> /dev/null; then
        log_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    DOCKER_COMPOSE_VERSION="1.29.2"
    curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
clone_project() {
    log_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    if [ -d "$PROJECT_DIR" ]; then
        log_warning "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º..."
        rm -rf "$PROJECT_DIR"
    fi
    
    git clone "$REPO_URL" "$PROJECT_DIR"
    cd "$PROJECT_DIR"
    
    log_success "–ü—Ä–æ–µ–∫—Ç —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ $PROJECT_DIR"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
setup_project() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    
    cd "$PROJECT_DIR"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
    if [ ! -f .env ]; then
        cp .env.example .env
        log_info ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    mkdir -p data logs backups
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    chown -R 1001:1001 data logs
    chmod +x scripts/*.sh
    
    log_success "–ü—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
setup_firewall() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ UFW –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    apt install -y ufw
    
    # –°–±—Ä–æ—Å –ø—Ä–∞–≤–∏–ª
    ufw --force reset
    
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞
    ufw default deny incoming
    ufw default allow outgoing
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ SSH
    ufw allow ssh
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è Docker
    ufw allow out 53    # DNS
    ufw allow out 80    # HTTP
    ufw allow out 443   # HTTPS
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ —Ñ–∞–π—Ä–≤–æ–ª–∞
    ufw --force enable
    
    log_success "–§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
create_systemd_service() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    
    cat > /etc/systemd/system/vpnbot.service << EOF
[Unit]
Description=VPN Telegram Bot
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable vpnbot
    
    log_success "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥—Ä–æ—Ç–∞—Ü–∏–∏
setup_logrotate() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤..."
    
    cat > /etc/logrotate.d/vpnbot << EOF
$PROJECT_DIR/logs/*.log {
    daily
    missingok
    rotate 7
    compress
    delaycompress
    notifempty
    copytruncate
}
EOF
    
    log_success "–†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron –¥–ª—è –±—ç–∫–∞–ø–æ–≤
setup_cron() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—ç–∫–∞–ø–æ–≤..."
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ crontab
    (crontab -l 2>/dev/null; echo "0 3 * * * cd $PROJECT_DIR && ./scripts/backup.sh") | crontab -
    
    log_success "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00)"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    cd "$PROJECT_DIR"
    
    if [ ! -f .env ]; then
        log_error ".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_vars=("TELEGRAM_BOT_TOKEN" "OUTLINE_API_URL")
    
    for var in "${required_vars[@]}"; do
        if ! grep -q "^${var}=" .env || grep -q "^${var}=$" .env || grep -q "^${var}=.*_here" .env; then
            log_warning "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è $var –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ"
        fi
    done
    
    log_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª: nano $PROJECT_DIR/.env"
}

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
start_project() {
    log_info "–ó–∞–ø—É—Å–∫ VPN Bot..."
    
    cd "$PROJECT_DIR"
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞
    if docker-compose -f docker-compose.prod.yml up -d --build; then
        log_success "VPN Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VPN Bot"
        return 1
    fi
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    docker-compose -f docker-compose.prod.yml ps
}

# –ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_summary() {
    log_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VPN Bot –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
    echo "‚öôÔ∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: $PROJECT_DIR/.env"
    echo ""
    echo "üîß –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  cd $PROJECT_DIR"
    echo "  make status     # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  make logs       # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    echo "  make restart    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  make backup     # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
    echo ""
    echo "üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:"
    echo "  1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª: nano $PROJECT_DIR/.env"
    echo "  2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: cd $PROJECT_DIR && make restart"
    echo "  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: cd $PROJECT_DIR && make logs"
    echo ""
    echo "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: https://github.com/your-username/vpnbot/issues"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo ""
    echo "ü§ñ VPN Telegram Bot - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"
    echo "=============================================="
    echo ""
    
    check_root
    check_os
    
    log_info "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    
    update_system
    install_docker
    install_docker_compose
    clone_project
    setup_project
    setup_firewall
    create_systemd_service
    setup_logrotate
    setup_cron
    check_config
    start_project
    show_summary
    
    echo ""
    log_success "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    log_error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $1"
    echo ""
    echo "üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É:"
    echo "  https://github.com/your-username/vpnbot/blob/main/DEPLOYMENT.md"
    echo ""
    exit 1
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
trap 'handle_error $LINENO' ERR

# –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
main "$@"